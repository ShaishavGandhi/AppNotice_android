apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// This is the library version used when deploying the artifact
version = "2.2.0"

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.1'
    publishNonDefault true

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 24
        versionCode 55
        versionName version
    }

    packagingOptions {
        exclude 'desktop.ini'
    }

    signingConfigs {
        testConfig {
            storeFile file("C:/Dev/Keystore/ghostery_release.keystore")
            storePassword "1t9hv8vH673LD6626p19)I_2N0348O!1Uu383,53104w7{5Q2g5F7w5H9f4,67Ty7Y3>AGK37f#39vgkQ0~oE33Sc3138R4}X8x3"
            keyAlias "evidon"
            keyPassword "1t9hv8vH673LD6626p19)I_2N0348O!1Uu383,53104w7{5Q2g5F7w5H9f4,67Ty7Y3>AGK37f#39vgkQ0~oE33Sc3138R4}X8x3"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.testConfig
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

android.libraryVariants.all { variant ->
    if (variant.buildType.name == 'release') {
        def oldFile = variant.outputs.get(0).getOutputFile()
        if (oldFile.name.contains("release")) {
            def newPath = oldFile.name.replace("release.aar", version.toString() + ".aar")
            variant.outputs.get(0).
                    setOutputFile(new File(oldFile.parentFile.toString(), newPath.toString()))
        }
    }
}

ext {
    bintrayRepo = 'maven'
    bintrayName = 'app-notice'

    publishedGroupId = 'com.ghostery.privacy.appnoticesdk'
    libraryName = 'AppNotice'
    artifact = 'app-notice'

    libraryDescription = 'Plugin to facilitate privacy preference management.'

    siteUrl = 'https://github.com/ghostery/AppNoticeSDK-Android'
    gitUrl = 'https://github.com/ghostery/AppNoticeSDK-Android.git'

    libraryVersion = version

    developerId = 'ghostery'
    developerName = 'Jason Mitchel'
    developerEmail = 'jmitchell@ghostery.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

task clean(type: Exec) {
    ext.lockhunter = '\"C:\\Apps\\LockHunter\\LockHunter.exe\"'
    def buildDir = file(new File("build"))
    commandLine 'cmd', "$lockhunter", '/delete', '/silent', buildDir
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile 'com.android.support:support-v4:24.1.1'
    compile 'com.android.support:design:24.1.1'
}

android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }

    task("javadoc${variant.name}", type: Jar) {
        classifier = "javadoc"
        description "Bundles Javadoc into a JAR file for $variant.name."
        from tasks["generate${variant.name}Javadoc"]
        exclude 'allclasses-frame.html', 'allclasses-noframe.html', 'constant-values.html', 'deprecated-list.html'
        exclude 'help-doc.html', 'index-all.html', 'index.html', 'overview-tree.html', 'package-list'
        exclude 'stylesheet.css'
        exclude 'resources/background.gif', 'resources/tab.gif', 'resources/titlebar.gif', 'resources/titlebar_end.gif'
    }

    task("jar${variant.name}", type: Jar) {
        description "Bundles compiled .class files into a JAR file for $variant.name."
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir
//        exclude '**/R.class', '**/R$*.class'
//        exclude '**/R.html', '**/R.*.html'
        exclude '**/BuildConfig.class'
    }
}

group = "AppNotice"                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId 'AppNoticeSDK'

                // Add your description here
                name 'AppNoticeSDK'
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

version = version

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
//    archives javadocJar
//    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
